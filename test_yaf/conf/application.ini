; 配置文件
; 配置文件支持继承, 支持分节


; 你不用担心配置文件太大造成解析性能问题, 因为Yaf会在第一个运行的时候载入配置文件,
; 把格式化后的内容保持在内存中. 直到配置文件有了修改, 才会再次载入. yaconf


; Yaf的配置项（有些可以使用php_init设置，有些必须设置到php.ini文件中）
; yaf.environ = product     PHP_INI_ALL     环境名称, 当用INI作为Yaf的配置文件时, 这个指明了Yaf将要在INI配置中读取的节的名字
; yaf.library =	NULL	    PHP_INI_ALL	    全局类库的目录路径
; yaf.cache_config = 0	    PHP_INI_SYSTEM	是否缓存配置文件(只针对INI配置文件生效), 打开此选项可在复杂配置的情况下提高性能
; yaf.name_suffix = 1	    PHP_INI_ALL	    在处理Controller, Action, Plugin, Model的时候, 类名中关键信息是否是后缀式, 比如UserModel, 而在前缀模式下则是ModelUser
; yaf.name_separator = ""	PHP_INI_ALL	    在处理Controller, Action, Plugin, Model的时候, 前缀和名字之间的分隔符, 默认为空, 也就是UserPlugin, 加入设置为"_", 则判断的依据就会变成:"User_Plugin"
; yaf.forward_limit	= 5	    PHP_INI_ALL	    forward最大嵌套深度
; yaf.use_namespace	= 0	    PHP_INI_SYSTEM	开启的情况下, Yaf将会使用命名空间方式注册自己的类, 比如Yaf_Application将会变成Yaf\Application
; yaf.use_spl_autoload = 0	PHP_INI_ALL	    开启的情况下, Yaf在加载不成功的情况下, 会继续让PHP的自动加载函数加载, 从性能考虑, 除非特殊情况, 否则保持这个选项关闭



[product]
; 支持直接写PHP中的已定义常量，APP_PATH已经在public/index.php入口文件中定义了
; [必要的配置项]应用的绝对目录路径
application.directory=APP_PATH "/application/"

; [可选的配置项]
; application.ext = php	            PHP脚本的扩展名
; application.bootstrap = Bootstrapplication.php	Bootstrap路径(绝对路径)
; application.library = application.directory + "/library"	本地(自身)类库的绝对目录地址
; 在Yaf中, 通过调用Yaf_Loader的registerLocalNamespace方法, 来申明那些类前缀是本地类, 即可.
; application.baseUri = NULL	    在路由中, 需要忽略的路径前缀, 一般不需要设置, Yaf会自动判断
; application.dispatcher.defaultModule = index	默认的模块
; application.dispatcher.throwException = True	在出错的时候, 是否抛出异常
; application.dispatcher.catchException	= False	是否使用默认的异常捕获Controller, 如果开启, 在有未捕获的异常的时候, 控制权会交给ErrorController的errorAction方法, 可以通过$request->getException()获得此异常对象
; application.dispatcher.defaultController = index	默认的控制器
; application.dispatcher.defaultAction = index	默认的动作
; application.view.ext = phtml	视图模板扩展名