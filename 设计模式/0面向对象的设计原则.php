<?php
/**
 * Created by PhpStorm.
 * User: yaok
 * Date: 2019/12/24
 * Time: 上午10:18
 */


/**
 * 面向对象编程的优点及目的：可复用、可扩展、可维护、灵活性好
 *
 * 设计模式不是软件设计的起点，而是终点。换句话来说不应该按照23种设计模式去套用，照葫芦画瓢，
 * 而是让自己写的代码自然而然的设计成了各种设计模式的样子。类似无招胜有招。
 * 知乎上有一个大牛给自己制定了一个编码规范：类代码行数不超过400，函数不超过20，嵌套不超过3层，
 * 一旦违反此规范，就重构代码。
 * 有人认为设计模式的价值，他让程序员之间对复杂结构的沟通变得简单。
 */


/**
 * 面向对象编程的六个基本原则
 *
 * 1、单一职责原则             ---封装、解耦合、复用性
 * 2、开放封闭原则             ---扩展性、可维护性
 * 3、依赖倒置原则             ---多态、解耦合、可维护性、灵活性
 * 4、里氏替换原则             ---继承、复用性、扩展性
 * 5、最少知识原则（迪米特法则）  ---封装、解耦合、可维护性
 * 6、接口隔离原则             ---封装、多态、解耦合、灵活性
 */



/**
 * 1、单一职责原则SRP（Single Responsibility Principle）
 *
 * 一个类应该仅有一个引起它变化的原因
 * 变化的方向隐含着类的责任
 * 一个类只负责一件事情，一个职责（对象的创建和使用分离，也是符合单一原则）
 *
 * 例如：电商有很多模块：登录模块、注册模块、购物车模块、订单模块、物流模块等等
 * 每个模块负责一个任务、对应一个类（不要使用一个类将几个模块都放在一起）
 */


/**
 * 2、开放封闭原则OCP
 *
 * 类模块应该是可扩展的，但是不可修改
 * 简单工厂模式违反了开闭原则，所以它不在23个设计模式里面
 *
 * 开闭原则就是功能扩展对外开放，代码修改对内关闭
 */


/**
 * 3、依赖倒置原则DIP
 *
 * 高层模块（稳定）不应该依赖于底层模块（变化），二者都应该依赖于抽象（稳定）
 * 抽象（稳定）不应该依赖于实现细节（变化），实现细节应该依赖于抽象（稳定）
 * 条件：有稳定类A，不稳定类B、C，有抽象或者接口D（稳定）
 *
 * 让A依赖B/C则造成依赖倒置，因为是稳定依赖不稳定
 * 正确应该让A、B、C依赖于接口D。稳定依赖稳定，不稳定依赖稳定。
 * 依赖倒置原则其实就是面向接口编程。
 */



/**
 * 4、里氏替换原则LSP
 *
 * 子类必须能够替换他们的基类
 * 不要改变父类原有的功能，不然就是组合了而不是继承了
 * 子类可以扩展父类的功能，但不要改变父类原有的功能
 */


/**
 * 5、最少知识原则（迪米特法则）LOD
 * 一个对象应该对其他对象尽可能少的了解，不和陌生人说话
 * 降低耦合（方法内，局部变量中，不要引入新的类）
 */


/**
 * 6、接口隔离原则ISP
 *
 * 设计接口功能尽量细粒度，最小功能单元
 * 不应该强迫客户程序依赖他们不用的方法
 * 接口应该小而完备
 * 设计接口功能尽量细粒度，最小功能单元
 */
