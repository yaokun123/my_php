<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Test extends Model
{
    //php artisan make:model Models/Test



    /*
    |--------------------------------------------------------------------------
    | 表名
    |--------------------------------------------------------------------------
    |
    | 注意我们并没有告诉 Eloquent 我们的 Test 模型使用哪张表
    | 默认规则是小写的模型类名复数格式作为与其对应的表名（除非在模型类中明确指定了其它名称）。
    | 所以，在本例中，Eloquent 认为 Test 模型存储记录在 tests 表中。
    |
    |
    | 你也可以在模型中定义 table 属性来指定自定义的表名
    | protected $table = 'my_tests';
    */



    /*
    |--------------------------------------------------------------------------
    | 主键
    |--------------------------------------------------------------------------
    |
    | Eloquent 默认每张表的主键名为 id，你可以在模型类中定义一个 $primaryKey 属性来覆盖该约定。
    |
    |
    | 此外，Eloquent 默认主键字段是自增的整型数据，这意味着主键将会被自动转化为 int 类型，
    | 如果你想要使用非自增或非数字类型主键，必须在对应模型中设置 $incrementing 属性为 false，
    | 如果主键不是整型，还要设置 $keyType 属性值为 string。
    |
    |
    | protected $primaryKey = 'test_id';
    */



    /*
    |--------------------------------------------------------------------------
    | 时间戳
    |--------------------------------------------------------------------------
    |
    | 默认情况下，Eloquent 期望 created_at 和 updated_at 已经存在于数据表中
    | 如果你不想要这些 Laravel 自动管理的数据列，在模型类中设置 $timestamps 属性为 false
    |
    | public $timestamps = false;
    |
    |
    | 如果你需要自定义时间戳格式，设置模型中的 $dateFormat 属性。
    | 该属性决定日期被如何存储到数据库中，以及模型被序列化为数组或 JSON 时日期的格式
    |
    |
    | protected $dateFormat = 'U';
    |
    |
    |
    | 如果你需要自定义用于存储时间戳的字段名称，可以在模型中设置 CREATED_AT 和 UPDATED_AT 常量
    | const CREATED_AT = 'add_time';
    | const UPDATED_AT = 'lastupdatetime';
    */





    /*
    |--------------------------------------------------------------------------
    | 数据库连接
    |--------------------------------------------------------------------------
    |
    | 默认情况下，所有的 Eloquent 模型使用应用配置中的默认数据库连接，
    | 如果你想要为模型指定不同的连接，可以通过 $connection 属性来设置：
    |
    |
    | protected $connection = 'connection-name';
    */



    /*
    |--------------------------------------------------------------------------
    | 获取模型
    |--------------------------------------------------------------------------
    |
    | 创建完模型及其关联的数据表后，就可以从数据库中获取数据了。
    | 将 Eloquent 模型看作功能强大的查询构建器，你可以使用它来流畅的查询与其关联的数据表。
    |
    |
    | use App\Models\Test;
    | $tests = Test::all();
    | foreach($tests as $test){
    |     echo $test->name;
    | }
    |
    |
    | Eloquent 的 all 方法返回模型表的所有结果
    | 由于每一个 Eloquent 模型都是一个查询构建器
    | 你还可以添加约束条件到查询，然后使用 get 方法获取对应结果
    |
    | $test = Test::where('active',1)->orderBy('name','desc')
    | ->take(10)->get();
    |
    | 由于 Eloquent 模型本质上就是查询构建器，你可以在 Eloquent 查询中使用查询构建器的所有方法。
    */
}
